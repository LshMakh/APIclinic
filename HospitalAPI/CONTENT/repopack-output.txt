This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-28T09:02:26.979Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
Auth/JwtManager.cs
Controller/AppointmentController.cs
Controller/DoctorController.cs
Controller/PatientController.cs
Controller/UserController.cs
Controller/VerficationController.cs
DTO's/AdminDetailsDto.cs
DTO's/AppointmentDtos.cs
DTO's/DoctorRegisterDto.cs
DTO's/EmailVerificationDto.cs
DTO's/PasswordChangeDto.cs
DTO's/ResetPasswordDto.cs
DTO's/TimeSlotDto.cs
DTO's/TokenPayloadDto.cs
DTO's/UpdateDoctorDto.cs
DTO's/UserLoginDto.cs
DTO's/UserRegisterDto.cs
Models/Appointment.cs
Models/Doctor.cs
Models/EmailSettings.cs
Models/Login.cs
Models/User.cs
Packages/PKG_APPOINTMENT.cs
Packages/PKG_BASE.cs
Packages/PKG_DOCTOR.cs
Packages/PKG_PATIENT.cs
Packages/PKG_USERS.cs
Packages/PKG_VERIFICATION.cs
Services/EmailService.cs
Services/PdfService.cs

================================================================
Repository Files
================================================================

================
File: Auth/JwtManager.cs
================
using HospitalAPI.DTO_s;
using HospitalAPI.Models;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace AuthProjWebApi.Auth
{
    public interface IJwtManager
    {
        Token GetToken(TokenPayloadDto user);
    }

    public class JwtManager : IJwtManager
    {
        private readonly IConfiguration _configuration;
        private readonly ILogger<JwtManager> _logger;

        public JwtManager(IConfiguration configuration, ILogger<JwtManager> logger)
        {
            _configuration = configuration;
            _logger = logger;
        }

        public Token GetToken(TokenPayloadDto user)
        {
            try
            {
                var key = Encoding.UTF8.GetBytes(_configuration["JWT:Key"]);
                var tokenHandler = new JwtSecurityTokenHandler();

                var claims = new List<Claim>
                {
                    new Claim(ClaimTypes.NameIdentifier, user.UserId.ToString()),
                    new Claim(ClaimTypes.Role, user.Role),
                    new Claim("PatientId", user.PatientId.ToString()),
                    new Claim("DoctorId", user.DoctorId.ToString())
                   
                };

       

                var tokenDescriptor = new SecurityTokenDescriptor
                {
                    Subject = new ClaimsIdentity(claims),
                    Expires = DateTime.UtcNow.AddHours(1),
                    SigningCredentials = new SigningCredentials(
                        new SymmetricSecurityKey(key),
                        SecurityAlgorithms.HmacSha256Signature
                    )
                };

                var token = tokenHandler.CreateToken(tokenDescriptor);
                return new Token { AccessToken = tokenHandler.WriteToken(token) };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error generating token for user {UserId}", user.UserId);
                throw;
            }
        }

    }

    public class Token
    {
        public string AccessToken { get; set; }
    }
}

================
File: Controller/AppointmentController.cs
================
using HospitalAPI.CONTENT.DTO_s;
using HospitalAPI.CONTENT.Packages;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;

namespace HospitalAPI.CONTENT.Controller
{
    [Route("api/[controller]")]
    [ApiController]
    public class AppointmentController : ControllerBase
    {
        private readonly IPKG_APPOINTMENT _appointmentPackage;
        private readonly ILogger<AppointmentController> _logger;

        public AppointmentController(IPKG_APPOINTMENT appointmentPackage, ILogger<AppointmentController> logger)
        {
            _appointmentPackage = appointmentPackage;
            _logger = logger;
            
        }

        [HttpPost("book")]
    public async Task<IActionResult> CreateAppointment([FromBody] CreateAppointmentDto dto)
    {
        try
        {
            var patientId = int.Parse(User.FindFirst("PatientId")?.Value);
            var (success, appointmentId) = await _appointmentPackage.CreateAppointment(
                dto.DoctorId, patientId, dto.AppointmentDate, dto.TimeSlot, dto.Description);

            if (!success)
            {
                return BadRequest(new { message = "Time slot is not available" });
            }

            return Ok(new { appointmentId, message = "Appointment booked successfully" });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error creating appointment");
            return StatusCode(500, new { message = "An error occurred while booking the appointment" });
        }
    }

    [HttpPost("block")]
    public async Task<IActionResult> BlockTimeSlot([FromBody] BlockTimeSlotDto dto)
    {
        try
        {
            var doctorId = int.Parse(User.FindFirst("DoctorId")?.Value);
            var success = await _appointmentPackage.BlockTimeSlot(doctorId, dto.AppointmentDate, dto.TimeSlot);

            if (!success)
            {
                return BadRequest(new { message = "Unable to block time slot" });
            }

            return Ok(new { message = "Time slot blocked successfully" });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error blocking time slot");
            return StatusCode(500, new { message = "An error occurred while blocking the time slot" });
        }
    }

    [HttpGet("doctor")]
    public async Task<IActionResult> GetDoctorAppointments()
    {
        try
        {
            var doctorId = int.Parse(User.FindFirst("DoctorId")?.Value);
            var appointments = await _appointmentPackage.GetDoctorAppointments(doctorId);
            return Ok(appointments);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error retrieving doctor appointments");
            return StatusCode(500, new { message = "An error occurred while retrieving appointments" });
        }
    }

        [HttpGet("patient")]
        public async Task<IActionResult> GetPatientAppointments()
        {
            try
            {
                var patientId = int.Parse(User.FindFirst("PatientId")?.Value);
                var appointments = await _appointmentPackage.GetPatientAppointments(patientId);
                return Ok(appointments);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving patient appointments");
                return StatusCode(500, new { message = "An error occurred while retrieving appointments" });
            }
        }

        [HttpPut("{id}/description")]
        public async Task<IActionResult> UpdateAppointmentDescription(int id, [FromBody] UpdateAppointmentDto dto)
        {
            try
            {
                var success = await _appointmentPackage.UpdateAppointmentDescription(id, dto.Description);
                if (!success)
                {
                    return NotFound(new { message = "Appointment not found or cannot be updated" });
                }
                return Ok(new { message = "Appointment updated successfully" });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error updating appointment description");
                return StatusCode(500, new { message = "An error occurred while updating the appointment" });
            }
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteAppointment(int id)
        {
            try
            {   
                var userId = int.Parse(User.FindFirst("PatientId")?.Value);
                var isDoctor = User.IsInRole("DOCTOR");

                var success = await _appointmentPackage.DeleteAppointment(id, userId, isDoctor);
                if (!success)
                {
                    return NotFound(new { message = "Appointment not found or cannot be deleted" });
                }
                return Ok(new { message = "Appointment deleted successfully" });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deleting appointment");
                return StatusCode(500, new { message = "An error occurred while deleting the appointment" });
            }
        }

        [HttpGet("available-slots/{doctorId}")]
        public async Task<IActionResult> GetAvailableSlots(int doctorId, [FromQuery] DateTime date)
        {
            try
            {
                var slots = await _appointmentPackage.GetAvailableSlots(doctorId, date);
                return Ok(slots);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving available slots");
                return StatusCode(500, new { message = "An error occurred while retrieving available slots" });
            }
        }

        [HttpGet("check-availability/{doctorId}")]
        public async Task<IActionResult> CheckSlotAvailability(
            int doctorId,
            [FromQuery] DateTime date,
            [FromQuery] string timeSlot)
        {
            try
            {
                var isAvailable = await _appointmentPackage.CheckSlotAvailability(doctorId, date, timeSlot);
                return Ok(new { isAvailable });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error checking slot availability");
                return StatusCode(500, new { message = "An error occurred while checking slot availability" });
            }
        }

    }
}

================
File: Controller/DoctorController.cs
================
using AuthProjWebApi.Auth;
using HospitalAPI.CONTENT.DTO_s;
using HospitalAPI.Models;
using HospitalAPI.Packages;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace HospitalAPI.Controller
{
    [Route("api/[controller]/[action]")]
    [ApiController]
    public class DoctorController : ControllerBase
    {
        IPKG_DOCTOR package;
        private readonly ILogger<DoctorController> _logger;
        private readonly IJwtManager jwtManager;

        public DoctorController(IPKG_DOCTOR package, IJwtManager jwtManager, ILogger<DoctorController> logger)
        {
            this.package = package;
            this.jwtManager = jwtManager;
            _logger = logger;
        }
        //[HttpPost]
        //public IActionResult RegisterDoctor(Doctor doctor)
        //{
        //    try
        //    {
        //        package.RegisterDoctor(doctor);
        //        return Ok(new { message = "Doctor registered successfully" });
        //    }
        //    catch (Exception ex)
        //    {
        //        if (ex.Message.Contains("already exists"))
        //        {
        //            return Conflict(new { message = ex.Message });
        //        }
        //        _logger.LogError(ex, "Error registering doctor");
        //        return StatusCode(StatusCodes.Status500InternalServerError,
        //            new { message = "An error occurred while registering the doctor" });
        //    }
        //}
        [HttpPost]
        public async Task<IActionResult> RegisterDoctor([FromForm] Doctor doctor, IFormFile photo, IFormFile cv)
        {
            try
            {
                var (success, message) = await package.RegisterDoctor(doctor, photo, cv);
                if (!success)
                {
                    return BadRequest(new { message });
                }
                return Ok(new { message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error registering doctor");
                return StatusCode(StatusCodes.Status500InternalServerError,
                    new { message = "An error occurred while registering the doctor" });
            }
        }

        [HttpGet("photo/{id}")]
        public async Task<IActionResult> GetDoctorPhoto(int id)
        {
            try
            {
                _logger.LogInformation("Retrieving photo for doctor ID: {Id}", id);
                var photoData = await package.GetDoctorPhoto(id);

                _logger.LogInformation("Photo data length: {Length} bytes", photoData?.Length ?? 0);

                if (photoData == null || photoData.Length == 0)
                {
                    _logger.LogWarning("No photo found for doctor ID: {Id}", id);
                    return NotFound();
                }

                _logger.LogInformation("Successfully retrieved photo for doctor ID: {Id}", id);
                return File(photoData, "image/jpeg");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving doctor photo for ID: {Id}", id);
                return StatusCode(500, "Error retrieving photo");
            }
        }

        [HttpGet("cv/{id}")]
        public async Task<IActionResult> GetDoctorCV(int id)
        {
            try
            {
                _logger.LogInformation("Retrieving CV for doctor ID: {Id}", id);
                var cvData = await package.GetDoctorCV(id);

                if (cvData == null || cvData.Length == 0)
                {
                    _logger.LogWarning("No CV found for doctor ID: {Id}", id);
                    return NotFound();
                }

                _logger.LogInformation("Successfully retrieved CV for doctor ID: {Id}", id);
                return File(cvData, "application/pdf", $"doctor_cv_{id}.pdf");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving doctor CV for ID: {Id}", id);
                return StatusCode(500, "Error retrieving CV");
            }
        }
        [HttpPost("extract-cv/{doctorId}")]
        public async Task<IActionResult> ExtractCvText(int doctorId)
        {
            try
            {
                var cvText = await package.ExtractAndStoreCvTextAsync(doctorId);
                return Ok(new { text = cvText });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error extracting CV text for doctor {DoctorId}", doctorId);
                return StatusCode(500, "An error occurred while processing the CV");
            }
        }

        [HttpGet]
        public IActionResult GetDoctorCards()
        {
            try
            {
                List<Doctor> docs = package.GetDoctorCards();

                if (docs == null)
                {
                    return NotFound("No doctor records found.");
                }

                if (!docs.Any())
                {
                    return NoContent();
                }

                return Ok(docs);
            }
            catch (InvalidOperationException ex)
            {
                // Log the exception details here
                return StatusCode(StatusCodes.Status400BadRequest,
                    new { message = "Invalid operation while retrieving doctor records.", error = ex.Message });
            }
            catch (Exception ex)
            {
                // Log the exception details here
                return StatusCode(StatusCodes.Status500InternalServerError,
                    new { message = "An unexpected error occurred while retrieving doctor records.", error = ex.Message });
            }
        }

        [HttpGet("{id}")]
        public IActionResult GetDoctorById(int id)
        {
            try
            {
                if (id <= 0)
                {
                    return BadRequest(new { message = "Invalid doctor ID. ID must be greater than 0." });
                }

                Doctor doc = package.GetDoctorById(id);

                if (doc == null)
                {
                    return NotFound(new { message = $"Doctor with ID {id} not found." });
                }

                return Ok(doc);
            }
            catch (InvalidOperationException ex)
            {
                // Log the exception details here
                return StatusCode(StatusCodes.Status400BadRequest,
                    new { message = $"Invalid operation while retrieving doctor with ID {id}.", error = ex.Message });
            }
            catch (Exception ex)
            {
                // Log the exception details here
                return StatusCode(StatusCodes.Status500InternalServerError,
                    new { message = $"An unexpected error occurred while retrieving doctor with ID {id}.", error = ex.Message });
            }
        }
        [HttpDelete("{id}")]
        public IActionResult DeleteDoctorById(int id)
        {
            try
            {
                _logger.LogInformation("Deleting doctor with ID {DoctorId}", id);
                var status = package.DeleteDoctorById(id);
                if (!status)
                {
                    _logger.LogWarning("Doctor with ID {DoctorId} not found", id);
                    return NotFound();

                }
                else
                {
                    _logger.LogInformation("Successfully deleted doctor with ID {DoctorId}", id);
                    return Ok();
                }
            }
           
            catch (Exception ex)
            {
                _logger.LogError(ex, "Unexpected error while deleting doctor with ID {DoctorId}", id);
                return Problem(
                    title: "Internal Server Error",
                    detail: "An unexpected error occurred",
                    statusCode: StatusCodes.Status500InternalServerError
                );
            }
        }

        [HttpGet("specialty-count/{categoryName}")]
        public ActionResult<int> GetSpecialtyCount(string categoryName)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(categoryName))
                {
                    return BadRequest("Category name cannot be empty");
                }

                var count = package.GetCategoryCount(categoryName);
                return Ok(count);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting specialty count for {category}", categoryName);
                return StatusCode(500, "An error occurred while processing your request");
            }
        }

        [HttpPut("update/{id}")]
        public async Task<IActionResult> UpdateDoctor(int id, [FromForm] UpdateDoctorDto doctor, IFormFile? photo = null, IFormFile? cv = null)
        {
            try
            {
                _logger.LogInformation("Updating doctor with ID {DoctorId}", id);

              

                var (success, message) = await package.UpdateDoctor(id, doctor, photo, cv);

                if (!success)
                {
                    return BadRequest(new { message });
                }

                var updatedDoctor = package.GetDoctorById(id);
                return Ok(new { message = "Doctor Updated Successfully" });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error updating doctor with ID {DoctorId}", id);
                return StatusCode(500, new { message = "An error occurred while updating the doctor" });
            }
        }

    }                                                                                                                                                               
}

================
File: Controller/PatientController.cs
================
using AuthProjWebApi.Auth;
using HospitalAPI.Models;
using HospitalAPI.Packages;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace HospitalAPI.Controller
{
    [Route("api/[controller]/[action]")]
    [ApiController]
    public class PatientController : ControllerBase
    {
        IPKG_PATIENT package;
        private readonly ILogger<UserController> _logger;
        private readonly IJwtManager jwtManager;

        public PatientController(IPKG_PATIENT package, IJwtManager jwtManager,ILogger<UserController>logger)
        {
            this.package = package;
            this.jwtManager = jwtManager;
            _logger = logger;
        }
        [HttpPost]
        public IActionResult RegisterPatient(User user)
        {
            try
            {
                package.RegisterPatient(user);
                return Ok(new { message = "Patient registered successfully" });
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("already exists"))
                {
                    return Conflict(new { message = ex.Message });
                }
                _logger.LogError(ex, "Error registering patient");
                return StatusCode(StatusCodes.Status500InternalServerError,
                    new { message = "An error occurred while registering the patient" });
            }
        }

    }
}

================
File: Controller/UserController.cs
================
using AuthProjWebApi.Auth;
using HospitalAPI.DTO_s;
using HospitalAPI.Models;
using HospitalAPI.Packages;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;

namespace HospitalAPI.Controller
{
    [Route("api/[controller]/[action]")]
    [ApiController]
    public class UserController : ControllerBase
    {
        IPKG_USERS package;
        private readonly IJwtManager jwtManager;
        private readonly ILogger<UserController> _logger;

        public UserController(IPKG_USERS package, IJwtManager jwtManager, ILogger<UserController> logger)
        {
            this.package = package;
            this.jwtManager = jwtManager;
            _logger = logger;
        }

      
        [HttpPost]
        public IActionResult Authenticate([FromBody] UserLoginDto logindata)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                var user = package.Authenticate(logindata);

                if (user == null)
                {
                    return Unauthorized(new { message = "Invalid email or password" });
                }

                var token = jwtManager.GetToken(user);
                return Ok(token);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Authentication failed for user {Email}", logindata.Email);
                return StatusCode(500, new { message = "Authentication failed. Please try again later." });
            }
        }

        [HttpGet("{id}")]
        public IActionResult GetUserInfo(int id)
        {
            try
            {
                var user = package.GetUserInfo(id);
                if (user == null)
                {
                    return NotFound(new { message = "User not found" });
                }
                return Ok(user);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving user information for ID: {Id}", id);
                return StatusCode(500, new { message = "An error occurred while retrieving user information" });
            }
        }

        [HttpGet("check-email/{email}")]
        public IActionResult CheckEmailExists(string email)
        {
            try
            {
                bool exists = package.CheckUserEmailExists(email);
                return Ok(new { exists = exists });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error checking email existence for {Email}", email);
                return StatusCode(500, new { message = "An error occurred while checking email existence" });
            }
        }
        [HttpPut("change-password/admin")]
        public IActionResult ChangePasswordAdmin([FromBody] PasswordChangeAdminDto model)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                

                var success = package.ChangePasswordAdmin(model.UserId, model.Password);


                return Ok(new { message = "Password changed successfully" });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error changing password for user {UserId}",
                    model.UserId);
                return StatusCode(500, new { message = "An error occurred while changing password" });
            }
        }
        [HttpPut("change-password")]
        public IActionResult ChangePassword([FromBody] PasswordChangeDto model)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                var userId = int.Parse(User.FindFirst(ClaimTypes.NameIdentifier)?.Value);

                var success = package.ChangePassword(userId, model.CurrentPassword, model.NewPassword);

                if (!success)
                {
                    return BadRequest(new { message = "Current password is incorrect" });
                }

                return Ok(new { message = "Password changed successfully" });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error changing password for user {UserId}",
                    User.FindFirst(ClaimTypes.NameIdentifier)?.Value);
                return StatusCode(500, new { message = "An error occurred while changing password" });
            }
        }
        [HttpPost("forgot-password")]
        public IActionResult ForgotPassword([FromBody] ResetPasswordDto model)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                var success = package.ResetPassword(model.Email);

                if (!success)
                {
                    return Ok(new { message = "If your email is registered, you will receive a password reset email shortly." });
                }

                return Ok(new { message = "If your email is registered, you will receive a password reset email shortly." });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error processing forgot password request for email {Email}", model.Email);
                return StatusCode(500, new { message = "An error occurred while processing your request" });
            }
        }

    }

}

================
File: Controller/VerficationController.cs
================
using Microsoft.AspNetCore.Mvc;
using HospitalAPI.DTO_s;
using HospitalAPI.Packages;

namespace HospitalAPI.Controller
{
    [Route("api/[controller]")]
    [ApiController]
    public class VerificationController : ControllerBase
    {
        private readonly IPKG_VERIFICATION _verificationPackage;
        private readonly ILogger<VerificationController> _logger;

        public VerificationController(
            IPKG_VERIFICATION verificationPackage,
            ILogger<VerificationController> logger)
        {
            _verificationPackage = verificationPackage;
            _logger = logger;
        }

   
        /// Sends a verification code to the specified email address
   
        [HttpPost("send")]
        public async Task<IActionResult> SendVerificationCode([FromBody] EmailVerificationDto request)
        {
            try
            {
                var result = await _verificationPackage.GenerateAndStoreVerificationCodeAsync(request.Email);
                if (!result)
                {
                    return StatusCode(500, new { message = "Failed to send verification code" });
                }
                return Ok(new { message = "Verification code sent successfully" });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error sending verification code to {Email}", request.Email);
                return StatusCode(500, new { message = "An error occurred while sending verification code" });
            }
        }


        /// Verifies the provided code for the specified email address
    
        [HttpPost("verify")]
        public async Task<IActionResult> VerifyCode([FromBody] EmailVerificationDto request)
        {
            try
            {
                var isValid = await _verificationPackage.VerifyCodeAsync(request.Email, request.VerificationCode);
                if (!isValid)
                {
                    return BadRequest(new { message = "Invalid or expired verification code" });
                }
                return Ok(new { message = "Code verified successfully" });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error verifying code for {Email}", request.Email);
                return StatusCode(500, new { message = "An error occurred while verifying code" });
            }
        }
    }
}

================
File: DTO's/AdminDetailsDto.cs
================
namespace HospitalAPI.DTO_s
{
    public class AdminDetailsDto
    {
        public int UserId { get; set; }
        public string Role {  get; set; }
    }
}

================
File: DTO's/AppointmentDtos.cs
================
using System.ComponentModel.DataAnnotations;

namespace HospitalAPI.CONTENT.DTO_s
{
    public class CreateAppointmentDto
    {
       
        [Required]
        public int DoctorId { get; set; }

        [Required]
        public DateTime AppointmentDate { get; set; }

        [Required]
        public string TimeSlot { get; set; }

        [MaxLength(500)]
        public string Description { get; set; }
    }

    public class UpdateAppointmentDto
    {
        [Required]
        [MaxLength(500)]
        public string Description { get; set; }
    }

    public class TimeSlotDto
    {
        public string TimeSlot { get; set; }
        public bool IsAvailable { get; set; }
        public bool IsBlocked { get; set; }
        public int? PatientId { get; set; }
    }

    public class BlockTimeSlotDto
    {
        [Required]
        public DateTime AppointmentDate { get; set; }

        [Required]
        public string TimeSlot { get; set; }
    }
}

================
File: DTO's/DoctorRegisterDto.cs
================
namespace HospitalAPI.DTO_s
{
    public class DoctorRegisterDto:UserRegisterDto
    {
        public string Specialization { get; set; }
        public string CvUrl { get; set; }
        public string PhotoUrl { get; set; }
    }
}

================
File: DTO's/EmailVerificationDto.cs
================
namespace HospitalAPI.DTO_s
{
    public class EmailVerificationDto
    {
        public string Email { get; set; }
        public string? VerificationCode { get; set; }
        public DateTime ExpirationTime { get; set; }
        public int AttemptCount { get; set; }
    }
}

================
File: DTO's/PasswordChangeDto.cs
================
using System.ComponentModel.DataAnnotations;

namespace HospitalAPI.DTO_s
{
    public class PasswordChangeDto
    {
        [Required]
        public string CurrentPassword { get; set; }

        [Required]
        public string NewPassword { get; set; }

        [Required]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }
    }

    public class PasswordChangeAdminDto
    {   
        [Required]
        public int UserId { get; set; }
        [Required]
        public string Password { get; set; }
    }
}

================
File: DTO's/ResetPasswordDto.cs
================
namespace HospitalAPI.DTO_s
{
    public class ResetPasswordDto
    {
        public string Email { get; set; }
    }
}

================
File: DTO's/TimeSlotDto.cs
================
namespace HospitalAPI.DTO_s
{
    public class TimeSlotDto
    {
        public string TimeSlot { get; set; }
        public bool isAvailable { get; set; }
    }

}

================
File: DTO's/TokenPayloadDto.cs
================
using Microsoft.AspNetCore.Identity;

namespace HospitalAPI.DTO_s
{
    public class TokenPayloadDto
    {
        public int UserId { get; set; }
        public int? PatientId { get; set; }
        public int? DoctorId { get; set; }
        public string Role {  get; set; }
    }
}

================
File: DTO's/UpdateDoctorDto.cs
================
namespace HospitalAPI.CONTENT.DTO_s
{
    public class UpdateDoctorDto
    {
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? PersonalNumber { get; set; }
        public string? Email {  get; set; }
        public string? Specialty { get; set; }   
       
    }
}

================
File: DTO's/UserLoginDto.cs
================
namespace HospitalAPI.DTO_s
{
    public class UserLoginDto
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}

================
File: DTO's/UserRegisterDto.cs
================
namespace HospitalAPI.DTO_s
{
    public class UserRegisterDto
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }

        public string PersonalNumber { get; set; }

    }
}

================
File: Models/Appointment.cs
================
namespace HospitalAPI.Models
{
    public class Appointment
    {
        public int AppointmentId { get; set; }
        public int DoctorId { get; set; }
        public int PatientId { get; set; }
        public DateTime AppointmentDate { get; set; }
        public string TimeSlot { get; set; }
        public string Description { get; set; }
        public bool IsBlocked { get; set; }

        // Navigation properties for frontend display
        public string DoctorFirstName { get; set; }
        public string DoctorLastName { get; set; }
        public string DoctorSpecialty { get; set; }
        public string PatientFirstName { get; set; }
        public string PatientLastName { get; set; }
    }
}

================
File: Models/Doctor.cs
================
namespace HospitalAPI.Models
{
    public class Doctor:User
    {
        public int? DoctorId { get; set; }
        public string Specialty { get; set; }
        public int? Rating { get; set; }
        public string? CvUrl { get; set; }
        public string? PhotoUrl { get; set; }
    }
}

================
File: Models/EmailSettings.cs
================
namespace HospitalAPI.Models
{
    public class MailjetSettings
    {
        public string ApiKey { get; set; }
        public string ApiSecret { get; set; }
        public string SenderEmail { get; set; }
        public string SenderName { get; set; }
    }

}

================
File: Models/Login.cs
================
using System.ComponentModel.DataAnnotations;

namespace HospitalAPI.Models
{
    public class Login
    {
        [Required]
        public string Email { get; set; }
        [Required]
        public string Password { get; set; }
    }
}

================
File: Models/User.cs
================
namespace HospitalAPI.Models
{
    public class User
    {
        public int? UserId { get; set; }
        public int? PatientId { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Password { get; set; }
        public string Email { get; set; }
        public string PersonalNumber { get; set; }
        public string? Role { get; set; } // "Patient", "Doctor" or "Admin"
       
    }
}

================
File: Packages/PKG_APPOINTMENT.cs
================
using AuthProjWebApi.Packages;
using HospitalAPI.CONTENT.DTO_s;
using HospitalAPI.Models;
using Oracle.ManagedDataAccess.Client;
using System.Data;

namespace HospitalAPI.CONTENT.Packages
{
    public interface IPKG_APPOINTMENT
    {
        Task<(bool success, int appointmentId)> CreateAppointment(int doctorId, int patientId, DateTime date, string timeSlot, string description);
        Task<bool> BlockTimeSlot(int doctorId, DateTime date, string timeSlot);
        Task<List<Appointment>> GetDoctorAppointments(int doctorId);
        Task<List<Appointment>> GetPatientAppointments(int patientId);
        Task<bool> UpdateAppointmentDescription(int appointmentId, string description);
        Task<bool> DeleteAppointment(int appointmentId, int userId, bool isDoctor);
        Task<bool> CheckSlotAvailability(int doctorId, DateTime date, string timeSlot);
        Task<List<TimeSlotDto>> GetAvailableSlots(int doctorId, DateTime date);
    }
    public class PKG_APPOINTMENT : PKG_BASE, IPKG_APPOINTMENT
    {
        private readonly ILogger<PKG_APPOINTMENT> _logger;

        public PKG_APPOINTMENT(ILogger<PKG_APPOINTMENT> logger)
        {
            _logger = logger;
        }

        public async Task<(bool success, int appointmentId)> CreateAppointment(int doctorId, int patientId, DateTime date,
        string timeSlot, string description)
        {
            using (var conn = new OracleConnection(ConnStr))
            {
                await conn.OpenAsync();
                using (var cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "olerning.PKG_LSH_APPOINTMENTS.create_appointment";
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add("p_doctor_id", OracleDbType.Int32).Value = doctorId;
                    cmd.Parameters.Add("p_patient_id", OracleDbType.Int32).Value = patientId;
                    cmd.Parameters.Add("p_appointment_date", OracleDbType.Date).Value = date.Date;
                    cmd.Parameters.Add("p_time_slot", OracleDbType.Varchar2).Value = timeSlot;
                    cmd.Parameters.Add("p_description", OracleDbType.Varchar2).Value = description ?? "";

                    var p_appointment_id = new OracleParameter("p_appointment_id", OracleDbType.Int32)
                    {
                        Direction = ParameterDirection.Output
                    };
                    cmd.Parameters.Add(p_appointment_id);

                    var p_success = new OracleParameter("p_success", OracleDbType.Int32)
                    {
                        Direction = ParameterDirection.Output
                    };
                    cmd.Parameters.Add(p_success);

                    try
                    {
                        await cmd.ExecuteNonQueryAsync();
                        return (
                            Convert.ToInt32(p_success.Value.ToString()) == 1,
                            Convert.ToInt32(p_appointment_id.Value.ToString())
                        );
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "Error creating appointment for doctor {DoctorId}", doctorId);
                        return (false, 0);
                    }
                }
            }
        }

        public async Task<bool> BlockTimeSlot(int doctorId, DateTime date, string timeSlot)
        {
            using (var conn = new OracleConnection(ConnStr))
            {
                await conn.OpenAsync();
                using (var cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "olerning.PKG_LSH_APPOINTMENTS.block_time_slot";
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add("p_doctor_id", OracleDbType.Int32).Value = doctorId;
                    cmd.Parameters.Add("p_appointment_date", OracleDbType.Date).Value = date.Date;
                    cmd.Parameters.Add("p_time_slot", OracleDbType.Varchar2).Value = timeSlot;

                    var p_success = new OracleParameter("p_success", OracleDbType.Int32)
                    {
                        Direction = ParameterDirection.Output
                    };
                    cmd.Parameters.Add(p_success);

                    try
                    {
                        await cmd.ExecuteNonQueryAsync();
                        return Convert.ToInt32(p_success.Value.ToString()) == 1;
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "Error blocking time slot for doctor {DoctorId}", doctorId);
                        return false;
                    }
                }
            }
        }

        public async Task<List<Appointment>> GetDoctorAppointments(int doctorId)
        {
            using (var conn = new OracleConnection(ConnStr))
            {
                await conn.OpenAsync();
                using (var cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "olerning.PKG_LSH_APPOINTMENTS.get_doctor_appointments";
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add("p_doctor_id", OracleDbType.Int32).Value = doctorId;
                
                    cmd.Parameters.Add("p_result", OracleDbType.RefCursor).Direction = ParameterDirection.Output;

                    try
                    {
                        var appointments = new List<Appointment>();
                        using (var reader = await cmd.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                appointments.Add(new Appointment
                                {
                                    AppointmentId = reader.GetInt32(reader.GetOrdinal("appointment_id")),
                                    DoctorId = reader.GetInt32(reader.GetOrdinal("doctor_id")),
                                    PatientId = reader.GetInt32(reader.GetOrdinal("patient_id")),
                                    AppointmentDate = reader.GetDateTime(reader.GetOrdinal("appointment_date")),
                                    TimeSlot = reader.GetString(reader.GetOrdinal("time_slot")),
                                    Description = reader.IsDBNull(reader.GetOrdinal("description")) ? null :
                                        reader.GetString(reader.GetOrdinal("description")),
                                    IsBlocked = Convert.ToBoolean(reader.GetInt32(reader.GetOrdinal("is_blocked"))),
                                    PatientFirstName = reader.IsDBNull(reader.GetOrdinal("patient_firstname")) ? null :
                                        reader.GetString(reader.GetOrdinal("patient_firstname")),
                                    PatientLastName = reader.IsDBNull(reader.GetOrdinal("patient_lastname")) ? null :
                                        reader.GetString(reader.GetOrdinal("patient_lastname"))
                                });
                            }
                        }
                        return appointments;
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "Error getting appointments for doctor {DoctorId}", doctorId);
                        throw;
                    }
                }
            }
        }

        public async Task<List<Appointment>> GetPatientAppointments(int patientId)
        {
            using (var conn = new OracleConnection(ConnStr))
            {
                await conn.OpenAsync();
                using (var cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "olerning.PKG_LSH_APPOINTMENTS.get_patient_appointments";
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add("p_patient_id", OracleDbType.Int32).Value = patientId;
                
                    cmd.Parameters.Add("p_result", OracleDbType.RefCursor).Direction = ParameterDirection.Output;

                    try
                    {
                        var appointments = new List<Appointment>();
                        using (var reader = await cmd.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                appointments.Add(new Appointment
                                {
                                    AppointmentId = reader.GetInt32(reader.GetOrdinal("appointment_id")),
                                    DoctorId = reader.GetInt32(reader.GetOrdinal("doctor_id")),
                                    PatientId = reader.GetInt32(reader.GetOrdinal("patient_id")),
                                    AppointmentDate = reader.GetDateTime(reader.GetOrdinal("appointment_date")),
                                    TimeSlot = reader.GetString(reader.GetOrdinal("time_slot")),
                                    Description = reader.IsDBNull(reader.GetOrdinal("description")) ? null :
                                        reader.GetString(reader.GetOrdinal("description")),
                                    DoctorFirstName = reader.GetString(reader.GetOrdinal("doctor_firstname")),
                                    DoctorLastName = reader.GetString(reader.GetOrdinal("doctor_lastname")),
                                    DoctorSpecialty = reader.GetString(reader.GetOrdinal("doctor_specialty"))
                                });
                            }
                        }
                        return appointments;
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "Error getting appointments for patient {PatientId}", patientId);
                        throw;
                    }
                }
            }
        }

        public async Task<bool> UpdateAppointmentDescription(int appointmentId, string description)
        {
            using (var conn = new OracleConnection(ConnStr))
            {
                await conn.OpenAsync();
                using (var cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "olerning.PKG_LSH_APPOINTMENTS.update_appointment_description";
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add("p_appointment_id", OracleDbType.Int32).Value = appointmentId;
                    cmd.Parameters.Add("p_description", OracleDbType.Varchar2).Value = description;

                    var p_success = new OracleParameter("p_success", OracleDbType.Int32)
                    {
                        Direction = ParameterDirection.Output
                    };
                    cmd.Parameters.Add(p_success);

                    try
                    {
                        await cmd.ExecuteNonQueryAsync();
                        return Convert.ToInt32(p_success.Value.ToString()) == 1;
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "Error updating appointment {AppointmentId}", appointmentId);
                        return false;
                    }
                }
            }
        }

        public async Task<bool> DeleteAppointment(int appointmentId, int userId, bool isDoctor)
        {
            using (var conn = new OracleConnection(ConnStr))
            {
                await conn.OpenAsync();
                using (var cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "olerning.PKG_LSH_APPOINTMENTS.delete_appointment";
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add("p_appointment_id", OracleDbType.Int32).Value = appointmentId;
                    cmd.Parameters.Add("p_user_id", OracleDbType.Int32).Value = userId;
                    cmd.Parameters.Add("p_is_doctor", OracleDbType.Int32).Value = isDoctor ? 1 : 0;

                    var p_success = new OracleParameter("p_success", OracleDbType.Int32)
                    {
                        Direction = ParameterDirection.Output
                    };
                    cmd.Parameters.Add(p_success);

                    try
                    {
                        await cmd.ExecuteNonQueryAsync();
                        return Convert.ToInt32(p_success.Value.ToString()) == 1;
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "Error deleting appointment {AppointmentId}", appointmentId);
                        return false;
                    }
                }
            }
        }

        public async Task<bool> CheckSlotAvailability(int doctorId, DateTime date, string timeSlot)
        {
            using (var conn = new OracleConnection(ConnStr))
            {
                await conn.OpenAsync();
                using (var cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "olerning.PKG_LSH_APPOINTMENTS.check_slot_availability";
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add("p_doctor_id", OracleDbType.Int32).Value = doctorId;
                    cmd.Parameters.Add("p_appointment_date", OracleDbType.Date).Value = date.Date;
                    cmd.Parameters.Add("p_time_slot", OracleDbType.Varchar2).Value = timeSlot;

                    var p_is_available = new OracleParameter("p_is_available", OracleDbType.Int32)
                    {
                        Direction = ParameterDirection.Output
                    };
                    cmd.Parameters.Add(p_is_available);

                    try
                    {
                        await cmd.ExecuteNonQueryAsync();
                        return Convert.ToInt32(p_is_available.Value.ToString()) == 1;
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "Error checking slot availability for doctor {DoctorId}", doctorId);
                        return false;
                    }
                }
            }
        }

        public async Task<List<TimeSlotDto>> GetAvailableSlots(int doctorId, DateTime date)
        {
            using (var conn = new OracleConnection(ConnStr))
            {
                await conn.OpenAsync();
                using (var cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "olerning.PKG_LSH_APPOINTMENTS.get_available_slots";
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add("p_doctor_id", OracleDbType.Int32).Value = doctorId;
                    cmd.Parameters.Add("p_date", OracleDbType.Date).Value = date.Date;
                    cmd.Parameters.Add("p_result", OracleDbType.RefCursor).Direction = ParameterDirection.Output;

                    try
                    {
                        var slots = new List<TimeSlotDto>();
                        using (var reader = await cmd.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                var slot = new TimeSlotDto
                                {
                                    TimeSlot = reader.GetString(reader.GetOrdinal("time_slot")),
                                    IsAvailable = !reader.IsDBNull(reader.GetOrdinal("is_available"))
                                        ? reader.GetInt32(reader.GetOrdinal("is_available")) == 1
                                        : false,
                                    IsBlocked = !reader.IsDBNull(reader.GetOrdinal("is_blocked"))
                                        ? reader.GetInt32(reader.GetOrdinal("is_blocked")) == 1
                                        : false,
                                    PatientId = !reader.IsDBNull(reader.GetOrdinal("patient_id"))
                                        ? reader.GetInt32(reader.GetOrdinal("patient_id"))
                                        : null
                                };
                                slots.Add(slot);
                            }
                        }
                        return slots;
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "Error getting available slots for doctor {DoctorId}. Details: {Message}",
                            doctorId, ex.Message);
                        throw;
                    }
                }
            }
        }

    }
}

================
File: Packages/PKG_BASE.cs
================
namespace AuthProjWebApi.Packages
{
    public class PKG_BASE
    {
        string connStr;

        public PKG_BASE()
        {
            connStr = @"Data Source=(DESCRIPTION =  (ADDRESS = (PROTOCOL = TCP)(HOST = 172.20.0.188)(PORT = 1521)) 
                                                                    (CONNECT_DATA =   (SERVER = DEDICATED) (SID = orcl)));
                                                                    User Id=olerning;Password=olerning";
        }

        protected string ConnStr
        {
            get { return connStr; }
        }


    }
}

================
File: Packages/PKG_DOCTOR.cs
================
using AuthProjWebApi.Packages;
using HospitalAPI.CONTENT.DTO_s;
using HospitalAPI.Models;
using HospitalAPI.Services;
using Oracle.ManagedDataAccess.Client;
using Oracle.ManagedDataAccess.Types;
using System.Data;

namespace HospitalAPI.Packages
{
    public interface IPKG_DOCTOR
    {
        //public void RegisterDoctor(Doctor doctor);
        public Task<(bool success, string message)> RegisterDoctor(Doctor doctor, IFormFile photo, IFormFile cv);
        public List<Doctor> GetDoctorCards();
        public Doctor GetDoctorById(int id);
        public bool DeleteDoctorById(int id);
        public Task<byte[]> GetDoctorPhoto(int id);
        public Task<byte[]> GetDoctorCV(int id);
        public Task<(bool success, string message)> UpdateDoctor(int doctorId, UpdateDoctorDto doctor, IFormFile? photo, IFormFile? cv);



        public int GetCategoryCount(string categoryName);
        public Task<string> ExtractAndStoreCvTextAsync(int doctorId);
    }

    public class PKG_DOCTOR:PKG_BASE,IPKG_DOCTOR
    {
        private IPKG_USERS _userPackage;
        private ILogger<PKG_PATIENT> _logger;
        private IPdfService _pdfService;

        public PKG_DOCTOR(IPKG_USERS userPackage, ILogger<PKG_PATIENT> logger, IPdfService pdfservice)
        {
            _userPackage = userPackage;
            _logger = logger;
            _pdfService = pdfservice;

        }
        private const int MAX_PHOTO_SIZE = 5 * 1024 * 1024; // 5MB
        private const int MAX_CV_SIZE = 10 * 1024 * 1024;   // 10MB
        private readonly string[] ALLOWED_PHOTO_TYPES = { "image/jpeg", "image/png" };
        private readonly string[] ALLOWED_CV_TYPES = { "application/pdf" };
        private bool ValidateFile(IFormFile file, int maxSize, string[] allowedTypes, out string errorMessage)
        {
            errorMessage = string.Empty;

            if (file.Length > maxSize)
            {
                errorMessage = $"File size exceeds maximum limit of {maxSize / (1024 * 1024)}MB";
                return false;
            }

            if (!allowedTypes.Contains(file.ContentType.ToLower()))
            {
                errorMessage = $"File type not allowed. Allowed types: {string.Join(", ", allowedTypes)}";
                return false;
            }

            return true;
        }
        public async Task<(bool success, string message)> RegisterDoctor(Doctor doctor, IFormFile photo, IFormFile cv)
        {
            if (_userPackage.CheckUserEmailExists(doctor.Email))
            {
                _logger.LogWarning("Attempted to register doctor with existing email: {Email}", doctor.Email);
                return (false, $"A user with email {doctor.Email} already exists.");
            }

            // Validate files
            if (!ValidateFile(photo, MAX_PHOTO_SIZE, ALLOWED_PHOTO_TYPES, out string photoError))
            {
                return (false, $"Photo validation failed: {photoError}");
            }

            if (!ValidateFile(cv, MAX_CV_SIZE, ALLOWED_CV_TYPES, out string cvError))
            {
                return (false, $"CV validation failed: {cvError}");
            }

            using (var conn = new OracleConnection(ConnStr))
            {
                await conn.OpenAsync();
                using (var cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "olerning.PKG_LSH_DOCTORS.register_doctor";
                    cmd.CommandType = CommandType.StoredProcedure;

                    // Convert files to byte arrays
                    using var photoStream = new MemoryStream();
                    await photo.CopyToAsync(photoStream);
                    byte[] photoData = photoStream.ToArray();

                    using var cvStream = new MemoryStream();
                    await cv.CopyToAsync(cvStream);
                    byte[] cvData = cvStream.ToArray();

                    cmd.Parameters.Add("p_email", OracleDbType.Varchar2).Value = doctor.Email;
                    cmd.Parameters.Add("p_password", OracleDbType.Varchar2).Value = doctor.Password;
                    cmd.Parameters.Add("p_first_name", OracleDbType.Varchar2).Value = doctor.FirstName;
                    cmd.Parameters.Add("p_last_name", OracleDbType.Varchar2).Value = doctor.LastName;
                    cmd.Parameters.Add("p_specialty", OracleDbType.Varchar2).Value = doctor.Specialty;
                    cmd.Parameters.Add("p_photo_data", OracleDbType.Blob).Value = photoData;
                    cmd.Parameters.Add("p_cv_data", OracleDbType.Blob).Value = cvData;
                    cmd.Parameters.Add("p_personal_number", OracleDbType.Varchar2).Value = doctor.PersonalNumber;
                    cmd.Parameters.Add("p_user_id", OracleDbType.Int32).Direction = ParameterDirection.Output;

                    try
                    {
                        await cmd.ExecuteNonQueryAsync();
                        return (true, "Doctor registered successfully");
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "Error registering doctor");
                        return (false, "Failed to register doctor");
                    }
                }
            }
        }
        public async Task<byte[]> GetDoctorPhoto(int id)
        {
            using (var conn = new OracleConnection(ConnStr))
            {
                await conn.OpenAsync();
                using (var cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "olerning.PKG_LSH_DOCTORS.get_doctor_photo";
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add("p_id", OracleDbType.Int32).Value = id;

                    var photoParam = new OracleParameter
                    {
                        ParameterName = "p_photo_data",
                        OracleDbType = OracleDbType.Blob,
                        Direction = ParameterDirection.Output
                    };
                    cmd.Parameters.Add(photoParam);

                    var statusParam = new OracleParameter
                    {
                        ParameterName = "p_status",
                        OracleDbType = OracleDbType.Decimal, 
                        Direction = ParameterDirection.Output
                    };
                    cmd.Parameters.Add(statusParam);

                    try
                    {
                        await cmd.ExecuteNonQueryAsync();

                        var status = ((OracleDecimal)statusParam.Value).ToInt32();
                        if (status <= 0)
                        {
                            _logger.LogWarning("No photo found for doctor ID: {Id}", id);
                            return Array.Empty<byte>();
                        }

                        if (photoParam.Value == DBNull.Value || photoParam.Value == null)
                        {
                            return Array.Empty<byte>();
                        }

                        // Handle the BLOB data
                        if (photoParam.Value is OracleBlob blob)
                        {
                            byte[] buffer = new byte[blob.Length];
                            await blob.ReadAsync(buffer, 0, (int)blob.Length);
                            return buffer;
                        }
                        else if (photoParam.Value is byte[] byteArray)
                        {
                            return byteArray;
                        }

                        _logger.LogWarning("Unexpected photo data type for doctor ID: {Id}", id);
                        return Array.Empty<byte>();
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "Error retrieving doctor photo for ID: {Id}", id);
                        throw;
                    }
                }
            }
        }

        public async Task<byte[]> GetDoctorCV(int id)
        {
            using (var conn = new OracleConnection(ConnStr))
            {
                await conn.OpenAsync();
                using (var cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "olerning.PKG_LSH_DOCTORS.get_doctor_cv";
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.Add(new OracleParameter
                    {
                        ParameterName = "p_id",
                        OracleDbType = OracleDbType.Int32,
                        Direction = ParameterDirection.Input,
                        Value = id
                    });

                    cmd.Parameters.Add(new OracleParameter
                    {
                        ParameterName = "p_cv_data",
                        OracleDbType = OracleDbType.Blob,
                        Direction = ParameterDirection.Output
                    });

                    cmd.Parameters.Add(new OracleParameter
                    {
                        ParameterName = "p_status",
                        OracleDbType = OracleDbType.Int32,
                        Direction = ParameterDirection.Output
                    });

                    try
                    {
                        await cmd.ExecuteNonQueryAsync();

                        // Check status first
                        var status = Convert.ToInt32(cmd.Parameters["p_status"].Value.ToString());
                        if (status <= 0)
                        {
                            _logger.LogWarning("No CV found for doctor ID: {Id}, Status: {Status}", id, status);
                            return Array.Empty<byte>();
                        }

                        var cvParam = cmd.Parameters["p_cv_data"];
                        if (cvParam.Value == DBNull.Value || cvParam.Value == null)
                        {
                            return Array.Empty<byte>();
                        }

                        // Handle the BLOB data
                        if (cvParam.Value is OracleBlob blob)
                        {
                            byte[] buffer = new byte[blob.Length];
                            await blob.ReadAsync(buffer, 0, (int)blob.Length);
                            return buffer;
                        }
                        else if (cvParam.Value is byte[] byteArray)
                        {
                            return byteArray;
                        }

                        _logger.LogWarning("Unexpected CV data type for doctor ID: {Id}", id);
                        return Array.Empty<byte>();
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "Error retrieving CV for doctor ID: {Id}", id);
                        throw;
                    }
                }
            }
        }
        public async Task<string> ExtractAndStoreCvTextAsync(int doctorId)
        {
            try
            {
                // Get the CV data
                var cvData = await GetDoctorCV(doctorId);
                if (cvData == null || cvData.Length == 0)
                {
                    throw new InvalidOperationException($"No CV found for doctor ID {doctorId}");
                }

                // Extract text from PDF
                var cvText = await _pdfService.ExtractTextFromPdfAsync(cvData);

           

                return cvText;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error processing CV for doctor {DoctorId}", doctorId);
                throw;
            }
        }
        public int GetCategoryCount(string categoryName)
        {
            using (OracleConnection conn = new OracleConnection(ConnStr))
            {
                try
                {
                    conn.Open();
                    using (OracleCommand cmd = conn.CreateCommand())
                    {
                        cmd.CommandText = "olerning.PKG_LSH_DOCTORS.get_category_count";
                        cmd.CommandType = CommandType.StoredProcedure;

                       
                        cmd.Parameters.Add("p_category", OracleDbType.Varchar2).Value = categoryName;

                        var resultParameter = cmd.Parameters.Add("p_result", OracleDbType.Decimal);
                        resultParameter.Direction = ParameterDirection.Output;

                        cmd.ExecuteNonQuery();

                        var oracleDecimal = (OracleDecimal)resultParameter.Value;
                        return (int)oracleDecimal.Value;
                    }
                }
                catch (OracleException ex)
                {
                    _logger.LogError(ex, "Database error getting Doctor count with {category}", categoryName);
                    throw new Exception($"Database error getting doctor count: {ex.Message}", ex);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error getting Doctor count with {category}", categoryName);
                    throw new Exception($"Error getting doctor count: {ex.Message}", ex);
                }
            }
        }

        //public async void RegisterDoctor(Doctor doctor)
        //{
        //    if (_userPackage.CheckUserEmailExists(doctor.Email))
        //    {
        //        _logger.LogWarning("Attempted to register doctor with existing email: {Email}", doctor.Email);
        //        throw new Exception($"A user with email {doctor.Email} already exists.");
        //    }


        //    string connstr = ConnStr;
        //    OracleConnection conn = new OracleConnection();
        //    conn.ConnectionString = connstr;
        //    conn.Open();


        //    OracleCommand cmd = conn.CreateCommand();
        //    cmd.Connection = conn;
        //    cmd.CommandText = "olerning.PKG_LSH_DOCTORS.register_doctor";
        //    cmd.CommandType = CommandType.StoredProcedure;
        //    cmd.Parameters.Add("p_email", OracleDbType.Varchar2).Value = doctor.Email;
        //    cmd.Parameters.Add("p_password", OracleDbType.Varchar2).Value = doctor.Password;
        //    cmd.Parameters.Add("p_first_name", OracleDbType.Varchar2).Value = doctor.FirstName;
        //    cmd.Parameters.Add("p_last_name", OracleDbType.Varchar2).Value = doctor.LastName;
        //    cmd.Parameters.Add("p_specialty", OracleDbType.Varchar2).Value = doctor.Specialty;
        //    cmd.Parameters.Add("p_photo_url", OracleDbType.Varchar2).Value = doctor.PhotoUrl;
        //    cmd.Parameters.Add("p_cv_url", OracleDbType.Varchar2).Value = doctor.CvUrl;
        //    cmd.Parameters.Add("p_personal_number", OracleDbType.Varchar2).Value = doctor.PersonalNumber;
        //    cmd.Parameters.Add("p_user_id", OracleDbType.Int32).Direction = ParameterDirection.Output;

        //    cmd.ExecuteNonQuery();
        //    conn.Close();
        //}
        
 
        public List<Doctor> GetDoctorCards()
        {

            List<Doctor> docs = new List<Doctor>();
            string connstr = ConnStr;


            OracleConnection conn = new OracleConnection();
            conn.ConnectionString = connstr;
            conn.Open();

            OracleCommand cmd = conn.CreateCommand();
            cmd.Connection = conn;
            cmd.CommandText = "olerning.PKG_LSH_DOCTORS.get_doctor_cards";
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("p_result", OracleDbType.RefCursor).Direction = ParameterDirection.Output;
            OracleDataReader reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                Doctor doc = new Doctor();
                doc.UserId = reader.GetInt32(reader.GetOrdinal("userid"));
                doc.DoctorId = reader.GetInt32(reader.GetOrdinal("doctorid"));
                doc.Rating = reader.GetInt32(reader.GetOrdinal("rating"));
                doc.FirstName = reader["firstname"].ToString();
                doc.LastName = reader["lastname"].ToString();
                doc.Email = reader["email"].ToString();
                doc.PersonalNumber = reader["personalnumber"].ToString();
                doc.Specialty = reader["specialty"].ToString();
                doc.PhotoUrl = reader["photourl"].ToString();

                docs.Add(doc);
            }
            conn.Close();
            return docs;


        }

        public Doctor GetDoctorById(int id)
        {
            Doctor doctor = null;
     

            using (OracleConnection conn = new OracleConnection(ConnStr))
            {
                try
                {
                    conn.Open();

                    using (OracleCommand cmd = conn.CreateCommand())
                    {
                        cmd.CommandText = "olerning.PKG_LSH_DOCTORS.get_doctor_by_id";
                        cmd.CommandType = CommandType.StoredProcedure;

                        cmd.Parameters.Add("p_id", OracleDbType.Int32).Value = id;
                        cmd.Parameters.Add("p_result", OracleDbType.RefCursor).Direction = ParameterDirection.Output;

                        using (OracleDataReader reader = cmd.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                doctor = new Doctor
                                {
                                    DoctorId = reader.GetInt32(reader.GetOrdinal("doctorid")),
                                    Rating = reader.GetInt32(reader.GetOrdinal("rating")),
                                    Email = reader["email"].ToString(),
                                    UserId = reader.GetInt32(reader.GetOrdinal("userid")),
                                    PersonalNumber = reader["personalnumber"].ToString(),
                                    FirstName = reader["firstname"].ToString(),
                                    LastName = reader["lastname"].ToString(),
                                    Specialty = reader["specialty"].ToString(),
                                    PhotoUrl = reader["photourl"].ToString()
                                };
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error: " + ex.Message);
                }
            }

            return doctor;
        }

        public bool DeleteDoctorById(int id)
        {
            using (OracleConnection conn = new OracleConnection(ConnStr))
            {
                try
                {
                    conn.Open();
                    using (OracleCommand cmd = conn.CreateCommand())
                    {
                        cmd.CommandText = "olerning.PKG_LSH_DOCTORS.delete_doctor_by_id";
                        cmd.CommandType = CommandType.StoredProcedure;

                        cmd.Parameters.Add("p_id", OracleDbType.Int32).Value = id;
                       

                        cmd.ExecuteNonQuery();
                        return true;


                    }
                }
                catch (OracleException ex)
                {
                    _logger.LogError(ex, "Database error deleting Doctor with {Id}", id);
                    throw new Exception($"Database error deleting Doctor: {ex.Message}", ex);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Database error deleting Doctor with {Id}", id);
                    throw new Exception($"Error deleting doctor: {ex.Message}", ex);
                }
            }
        }
        public async Task<(bool success, string message)> UpdateDoctor(int doctorId, UpdateDoctorDto doctor, IFormFile? photo = null, IFormFile? cv = null)
        {
            byte[]? photoData = null;
            byte[]? cvData = null;

            try
            {
                // Check if any update is requested
                if (doctor == null && photo == null && cv == null)
                {
                    return (false, "No updates provided");
                }

                // Process photo if provided
                if (photo != null)
                {
                    if (!ValidateFile(photo, MAX_PHOTO_SIZE, ALLOWED_PHOTO_TYPES, out string photoError))
                    {
                        return (false, photoError);
                    }
                    using var photoStream = new MemoryStream();
                    await photo.CopyToAsync(photoStream);
                    photoData = photoStream.ToArray();
                }

                // Process CV if provided
                if (cv != null)
                {
                    if (!ValidateFile(cv, MAX_CV_SIZE, ALLOWED_CV_TYPES, out string cvError))
                    {
                        return (false, cvError);
                    }
                    using var cvStream = new MemoryStream();
                    await cv.CopyToAsync(cvStream);
                    cvData = cvStream.ToArray();
                }

                using var conn = new OracleConnection(ConnStr);
                await conn.OpenAsync();

                using var cmd = conn.CreateCommand();
                cmd.CommandText = "olerning.PKG_LSH_DOCTORS.update_doctor";
                cmd.CommandType = CommandType.StoredProcedure;

                // Add parameters
                cmd.Parameters.Add("p_doctor_id", OracleDbType.Int32).Value = doctorId;

                // Only add non-null parameters
                cmd.Parameters.Add("p_first_name", OracleDbType.Varchar2).Value =
                    !string.IsNullOrWhiteSpace(doctor?.FirstName) ? doctor.FirstName : DBNull.Value;

                cmd.Parameters.Add("p_last_name", OracleDbType.Varchar2).Value =
                    !string.IsNullOrWhiteSpace(doctor?.LastName) ? doctor.LastName : DBNull.Value;

                cmd.Parameters.Add("p_email", OracleDbType.Varchar2).Value =
                    !string.IsNullOrWhiteSpace(doctor?.Email) ? doctor.Email : DBNull.Value;

                cmd.Parameters.Add("p_specialty", OracleDbType.Varchar2).Value =
                    !string.IsNullOrWhiteSpace(doctor?.Specialty) ? doctor.Specialty : DBNull.Value;

                cmd.Parameters.Add("p_personal_number", OracleDbType.Varchar2).Value =
                    !string.IsNullOrWhiteSpace(doctor?.PersonalNumber) ? doctor.PersonalNumber : DBNull.Value;

                cmd.Parameters.Add("p_photo_data", OracleDbType.Blob).Value =
                    photoData != null ? (object)photoData : DBNull.Value;

                cmd.Parameters.Add("p_cv_data", OracleDbType.Blob).Value =
                    cvData != null ? (object)cvData : DBNull.Value;

                var successParam = cmd.Parameters.Add("p_success", OracleDbType.Int32);
                successParam.Direction = ParameterDirection.Output;

                await cmd.ExecuteNonQueryAsync();

                int success = Convert.ToInt32(successParam.Value.ToString());

              

                return success == 1
                    ? (true, "Doctor updated successfully")
                    : (false, "Failed to update doctor. Email might already be in use or no valid updates were provided.");
            }
            catch (OracleException ex)
            {
                _logger.LogError(ex, "Database error updating doctor with ID {DoctorId}: {Message}",
                    doctorId, ex.Message);
                return (false, $"Database error: {ex.Message}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error updating doctor with ID {DoctorId}: {Message}",
                    doctorId, ex.Message);
                return (false, "An unexpected error occurred while updating the doctor");
            }
        }

    }
}

================
File: Packages/PKG_PATIENT.cs
================
using AuthProjWebApi.Packages;
using HospitalAPI.Models;
using Oracle.ManagedDataAccess.Client;
using System.Data;

namespace HospitalAPI.Packages
{

    public interface IPKG_PATIENT
    {
        public void RegisterPatient(User patient);

    }


    public class PKG_PATIENT : PKG_BASE,IPKG_PATIENT
    {
        private readonly IPKG_USERS _userPackage;
        private readonly ILogger<PKG_PATIENT> _logger;

        public PKG_PATIENT(IPKG_USERS userPackage, ILogger<PKG_PATIENT> logger)
        {
            _userPackage = userPackage;
            _logger = logger;
        }
        public void RegisterPatient(User patient)
        {
            if (_userPackage.CheckUserEmailExists(patient.Email))
            {
                _logger.LogWarning("Attempted to register patient with existing email: {Email}", patient.Email);
                throw new Exception($"A user with email {patient.Email} already exists.");
            }

            string connstr = ConnStr;
            OracleConnection conn = new OracleConnection();
            conn.ConnectionString = connstr;
            conn.Open();

            OracleCommand cmd = conn.CreateCommand();
            cmd.Connection = conn;
            cmd.CommandText = "olerning.PKG_LSH_PATIENTS.register_patient";
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("p_email", OracleDbType.Varchar2).Value = patient.Email;
            cmd.Parameters.Add("p_password", OracleDbType.Varchar2).Value = patient.Password;
            cmd.Parameters.Add("p_first_name", OracleDbType.Varchar2).Value = patient.FirstName;
            cmd.Parameters.Add("p_last_name", OracleDbType.Varchar2).Value = patient.LastName;
            cmd.Parameters.Add("p_personal_number", OracleDbType.Varchar2).Value = patient.PersonalNumber;
            cmd.Parameters.Add("p_user_id", OracleDbType.Int32).Direction = ParameterDirection.Output;

            cmd.ExecuteNonQuery();
            conn.Close();
        }
    }
}

================
File: Packages/PKG_USERS.cs
================
using AuthProjWebApi.Packages;
using HospitalAPI.DTO_s;
using HospitalAPI.Models;
using HospitalAPI.Services;
using Microsoft.AspNetCore.Identity.Data;
using Microsoft.AspNetCore.Mvc;
using Oracle.ManagedDataAccess.Client;
using System.Data;
using System.Linq.Expressions;
using System.Text;

namespace HospitalAPI.Packages
{
    public interface IPKG_USERS
    {

        public TokenPayloadDto? Authenticate(UserLoginDto logindata);
        public object? GetUserInfo(int userId);
        public bool CheckUserEmailExists(string email);
        public bool ChangePassword(int id, string currentPass, string newPass);
        public bool ResetPassword(string email);
        public bool ChangePasswordAdmin(int id, string password);
    }
    public class PKG_USERS : PKG_BASE, IPKG_USERS
    {
        private readonly ILogger<PKG_USERS> _logger;
        private readonly IEmailService _emailService;

        public PKG_USERS(ILogger<PKG_USERS> logger, IEmailService emailService)
        {
            _emailService = emailService;
            _logger = logger;
        }
        private string GenerateRandomPassword()
        {
            const string upperCase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            const string lowerCase = "abcdefghijklmnopqrstuvwxyz";
            const string numbers = "0123456789";
            const string special = "!@#$%^&*()_+-=[]{}|;:,.<>?";

            var random = new Random();
            var password = new StringBuilder();

            password.Append(upperCase[random.Next(upperCase.Length)]);
            password.Append(lowerCase[random.Next(lowerCase.Length)]);
            password.Append(numbers[random.Next(numbers.Length)]);
            password.Append(special[random.Next(special.Length)]);

            const string allChars = upperCase + lowerCase + numbers + special;
            for (int i = 0; i < 8; i++)
            {
                password.Append(allChars[random.Next(allChars.Length)]);
            }

            return new string(password.ToString().ToCharArray()
                .OrderBy(x => random.Next()).ToArray());
        }
        public bool ResetPassword(string email)
        {
            using (OracleConnection conn = new OracleConnection(ConnStr))
            {
                try
                {
                    conn.Open();
                    using (OracleCommand cmd = conn.CreateCommand())
                    {
                        string newPassword = GenerateRandomPassword();

                        cmd.CommandText = "olerning.PKG_LSH_USERS.reset_password";
                        cmd.CommandType = CommandType.StoredProcedure;

                        cmd.Parameters.Add("p_email", OracleDbType.Varchar2).Value = email;
                        cmd.Parameters.Add("p_new_password", OracleDbType.Varchar2).Value = newPassword;
                        cmd.Parameters.Add("p_success", OracleDbType.Int32).Direction = ParameterDirection.Output;

                         cmd.ExecuteNonQuery();

                        bool success = Convert.ToInt32(cmd.Parameters["p_success"].Value.ToString()) == 1;

                        if (success)
                        {
                             _emailService.SendPasswordResetEmailAsync(email, newPassword);
                        }

                        return success;
                    }
                }
                catch (OracleException ex)
                {
                    _logger.LogError(ex, "Database error resetting password for email {Email}", email);
                    throw new Exception("Database error while resetting password", ex);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error resetting password for email {Email}", email);
                    throw;
                }
            }
        }
        public bool CheckUserEmailExists(string email)
        {
            using (OracleConnection conn = new OracleConnection(ConnStr))
            {
                try
                {
                    conn.Open();
                    using (OracleCommand cmd = conn.CreateCommand())
                    {
                        cmd.CommandText = "olerning.PKG_LSH_USERS.get_user_by_email";
                        cmd.CommandType = CommandType.StoredProcedure;

                        cmd.Parameters.Add("p_email", OracleDbType.Varchar2).Value = email;
                        cmd.Parameters.Add("p_exists", OracleDbType.Int32).Direction = ParameterDirection.Output;

                        cmd.ExecuteNonQuery();

                        int exists = Convert.ToInt32(cmd.Parameters["p_exists"].Value.ToString());
                        return exists == 1;
                    }
                }
                catch (OracleException ex)
                {
                    _logger.LogError(ex, "Database error checking email existence for {Email}", email);
                    throw new Exception($"Database error checking email existence: {ex.Message}", ex);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error checking email existence for {Email}", email);
                    throw new Exception($"Error checking email existence: {ex.Message}", ex);
                }
            }
        }
        public object? GetUserInfo(int userId)
        {
            using (OracleConnection conn = new OracleConnection(ConnStr))
            {
                try
                {
                    conn.Open();
                    using (OracleCommand cmd = conn.CreateCommand())
                    {
                        cmd.CommandText = "olerning.PKG_LSH_USERS.get_user_details";
                        cmd.CommandType = CommandType.StoredProcedure;

                        cmd.Parameters.Add("p_userid", OracleDbType.Int32).Value = userId;
                        cmd.Parameters.Add("p_result", OracleDbType.RefCursor).Direction = ParameterDirection.Output;

                        using (OracleDataReader reader = cmd.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                string role = reader["role"].ToString().ToUpper();

                                switch (role)
                                {
                                    case "DOCTOR":
                                        return new Doctor
                                        {
                                            UserId = reader.GetInt32(reader.GetOrdinal("userid")),
                                            Rating = reader.GetInt32(reader.GetOrdinal("rating")),
                                            Role = role,
                                            DoctorId = reader.GetInt32(reader.GetOrdinal("doctorid")),
                                            FirstName = reader["firstname"].ToString(),
                                            LastName = reader["lastname"].ToString(),
                                            Email = reader["email"].ToString(),
                                            PersonalNumber = reader["personalnumber"].ToString(),
                                            Specialty = reader["specialty"].ToString(),
                                            //PhotoUrl = reader["photourl"].ToString(),
                                            //CvUrl = reader["cvurl"].ToString()
                                        };

                                    case "PATIENT":
                                        return new User
                                        {
                                            UserId = reader.GetInt32(reader.GetOrdinal("userid")),
                                            PatientId = reader.GetInt32(reader.GetOrdinal("patientid")),
                                            Role = role,
                                            FirstName = reader["firstname"].ToString(),
                                            LastName = reader["lastname"].ToString(),
                                            Email = reader["email"].ToString(),
                                            PersonalNumber = reader["personalnumber"].ToString()

                                        };
                                    case "ADMIN":
                                        return new AdminDetailsDto
                                        {
                                            UserId = reader.GetInt32(reader.GetOrdinal("userid")),
                                            Role = role,
                                        };

                                    default:
                                        _logger.LogWarning("Unknown role {Role} for user {UserId}", role, userId);
                                        return null;
                                }
                            }
                            return null;
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error retrieving user information for userId: {UserId}", userId);
                    throw;
                }
            }
        }




        public TokenPayloadDto? Authenticate(UserLoginDto loginData)
        {
            using (OracleConnection conn = new OracleConnection(ConnStr))
            {
                try
                {
                    conn.Open();
                    using (OracleCommand cmd = conn.CreateCommand())
                    {
                        cmd.CommandText = "olerning.PKG_LSH_USERS.authenticate_user";
                        cmd.CommandType = CommandType.StoredProcedure;

                        // Add parameters
                        cmd.Parameters.Add("p_email", OracleDbType.Varchar2).Value = loginData.Email;
                        cmd.Parameters.Add("p_password", OracleDbType.Varchar2).Value = loginData.Password;
                        cmd.Parameters.Add("p_result", OracleDbType.RefCursor).Direction = ParameterDirection.Output;

                        using (OracleDataReader reader = cmd.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                if (reader["USERID"] != DBNull.Value)
                                {
                                    return new TokenPayloadDto
                                    {
                                        UserId = Convert.ToInt32(reader["USERID"]),
                                        Role = reader["ROLE"].ToString(),
                                        PatientId = reader["patientid"] != DBNull.Value ? Convert.ToInt32(reader["patientid"]):null,
                                        DoctorId = reader["doctorid"] != DBNull.Value ? Convert.ToInt32(reader["doctorid"]):null
                                    };
                                }
                            }
                            return null;
                        }
                    }
                }
                catch (OracleException ex)
                {
                    throw new Exception($"Database error during authentication: {ex.Message}", ex);
                }
                catch (Exception ex)
                {
                    throw new Exception($"Error during authentication: {ex.Message}", ex);
                }
            }
        }
        public bool ChangePasswordAdmin(int userId, string password)
        {
            using(OracleConnection conn = new OracleConnection(ConnStr))
            {
                try
                {
                    conn.Open();
                    using(OracleCommand cmd = conn.CreateCommand())
                    {
                        cmd.CommandText = "olerning.PKG_LSH_USERS.change_password_admin";
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("p_id", OracleDbType.Int32).Value = userId;
                        cmd.Parameters.Add("p_password", OracleDbType.Varchar2).Value = password;
                        cmd.Parameters.Add("p_success", OracleDbType.Int32).Direction = ParameterDirection.Output;

                        cmd.ExecuteNonQuery();

                        return Convert.ToInt32(cmd.Parameters["p_success"].Value.ToString()) == 1;
                    }
                }
                catch (OracleException ex)
                {
                    _logger.LogError(ex, "Database error changing password for user {UserId}", userId);
                    throw new Exception("Database error while changing password", ex);
                }
            }
        }
        public bool ChangePassword(int userId, string currentPassword, string newPassword)
        {
            using (OracleConnection conn = new OracleConnection(ConnStr))
            {
                try
                {
                    conn.Open();
                    using (OracleCommand cmd = conn.CreateCommand())
                    {
                        cmd.CommandText = "olerning.PKG_LSH_USERS.change_password";
                        cmd.CommandType = CommandType.StoredProcedure;

                        cmd.Parameters.Add("p_user_id", OracleDbType.Int32).Value = userId;
                        cmd.Parameters.Add("p_current_password", OracleDbType.Varchar2).Value = currentPassword;
                        cmd.Parameters.Add("p_new_password", OracleDbType.Varchar2).Value = newPassword;
                        cmd.Parameters.Add("p_success", OracleDbType.Int32).Direction = ParameterDirection.Output;

                        cmd.ExecuteNonQuery();

                        return Convert.ToInt32(cmd.Parameters["p_success"].Value.ToString()) == 1;
                    }
                }
                catch (OracleException ex)
                {
                    _logger.LogError(ex, "Database error changing password for user {UserId}", userId);
                    throw new Exception("Database error while changing password", ex);
                }
            }
        }
    }
    }

================
File: Packages/PKG_VERIFICATION.cs
================
using Oracle.ManagedDataAccess.Client;
using System.Data;
using AuthProjWebApi.Packages;
using HospitalAPI.Services;

namespace HospitalAPI.Packages
{
    public interface IPKG_VERIFICATION
    {
        Task<bool> GenerateAndStoreVerificationCodeAsync(string email);
        Task<bool> VerifyCodeAsync(string email, string code);
    }

    public class PKG_VERIFICATION : PKG_BASE, IPKG_VERIFICATION
    {
        private readonly IEmailService _emailService;
        private readonly ILogger<PKG_VERIFICATION> _logger;

        public PKG_VERIFICATION(
            IEmailService emailService,
            ILogger<PKG_VERIFICATION> logger)
        {
            _emailService = emailService;
            _logger = logger;
        }

        public async Task<bool> GenerateAndStoreVerificationCodeAsync(string email)
        {
            var code = GenerateRandomCode();

            try
            {
                using (var conn = new OracleConnection(ConnStr))
                {
                    await conn.OpenAsync();
                    using (var cmd = conn.CreateCommand())
                    {
                        cmd.CommandText = "olerning.PKG_LSH_VERIFICATION.create_verification_code";
                        cmd.CommandType = CommandType.StoredProcedure;

                        cmd.Parameters.Add("p_email", OracleDbType.Varchar2).Value = email;
                        cmd.Parameters.Add("p_code", OracleDbType.Varchar2).Value = code;

                        await cmd.ExecuteNonQueryAsync();
                    }
                }

                // Send email only after successful database operation
                await _emailService.SendVerificationEmailAsync(email, code);
                return true;
            }
            catch (OracleException ex)
            {
                _logger.LogError(ex, "Database error while storing verification code for {Email}", email);
                throw new Exception("Failed to store verification code", ex);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in verification process for {Email}", email);
                throw;
            }
        }

        public async Task<bool> VerifyCodeAsync(string email, string code)
        {
            try
            {
                using (var conn = new OracleConnection(ConnStr))
                {
                    await conn.OpenAsync();
                    using (var cmd = conn.CreateCommand())
                    {
                        cmd.CommandText = "olerning.PKG_LSH_VERIFICATION.verify_code";
                        cmd.CommandType = CommandType.StoredProcedure;

                        cmd.Parameters.Add("p_email", OracleDbType.Varchar2).Value = email;
                        cmd.Parameters.Add("p_code", OracleDbType.Varchar2).Value = code;
                        cmd.Parameters.Add("p_is_valid", OracleDbType.Int32).Direction = ParameterDirection.Output;

                        await cmd.ExecuteNonQueryAsync();

                        return Convert.ToInt32(cmd.Parameters["p_is_valid"].Value.ToString()) == 1;
                    }
                }
            }
            catch (OracleException ex)
            {
                _logger.LogError(ex, "Database error while verifying code for {Email}", email);
                throw new Exception("Failed to verify code", ex);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in verification process for {Email}", email);
                throw;
            }
        }

        private string GenerateRandomCode()
        {
            Random random = new Random();
            return random.Next(100000, 999999).ToString();
        }
    }
}

================
File: Services/EmailService.cs
================
using HospitalAPI.Models;
using Mailjet.Client;
using Mailjet.Client.TransactionalEmails;
using Microsoft.Extensions.Options;

namespace HospitalAPI.Services
{
    public interface IEmailService
    {
        Task SendVerificationEmailAsync(string toEmail, string code);
        Task SendPasswordResetEmailAsync(string toEmail, string newPassword);
    }

    public class EmailService : IEmailService
    {
        private readonly MailjetClient _client;
        private readonly MailjetSettings _settings;
        private readonly ILogger<EmailService> _logger;

        public EmailService(IOptions<MailjetSettings> settings, ILogger<EmailService> logger)
        {
            _settings = settings.Value;
            _logger = logger;
            _client = new MailjetClient(_settings.ApiKey, _settings.ApiSecret);
        }

        public async Task SendPasswordResetEmailAsync(string toEmail, string newPassword)
        {
            try
            {
                var email = new TransactionalEmailBuilder()
                    .WithFrom(new SendContact(_settings.SenderEmail, _settings.SenderName))
                    .WithSubject("Password Reset")
                    .WithHtmlPart($@"
                    <h3>Password Reset</h3>
                    <p>Your password has been reset. Your new password is:</p>
                    <p style='font-size: 18px; font-weight: bold; padding: 10px; background-color: black; color:white;'>{newPassword}</p>
                    <p>For security reasons, we recommend changing this password after logging in.</p>
                    <p>If you did not request this password reset, please contact support immediately.</p>")
                    .WithTo(new SendContact(toEmail))
                    .Build();

                var response = await _client.SendTransactionalEmailAsync(email);

                if (!response.Messages.Any(m => m.Status == "success"))
                {
                    throw new Exception("Failed to send password reset email");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send password reset email to {Email}", toEmail);
                throw new Exception("Failed to send password reset email", ex);
            }
        }

        public async Task SendVerificationEmailAsync(string toEmail, string code)
        {
            try
            {
                var email = new TransactionalEmailBuilder()
                    .WithFrom(new SendContact(_settings.SenderEmail, _settings.SenderName))
                    .WithSubject("Email Verification Code")
                    .WithHtmlPart($"<h3>Your verification code is: {code}</h3><p>This code will expire in 2 minutes.</p>")
                    .WithTo(new SendContact(toEmail))
                    .Build();

                var response = await _client.SendTransactionalEmailAsync(email);

                if (!response.Messages.Any(m => m.Status == "success"))
                {
                    throw new Exception("Failed to send email");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send verification email to {Email}", toEmail);
                throw new Exception("Failed to send verification email", ex);
            }
        }
    }

}

================
File: Services/PdfService.cs
================
using iText.Kernel.Pdf.Canvas.Parser.Listener;
using iText.Kernel.Pdf.Canvas.Parser;
using iText.Kernel.Pdf;
using System.Text;

namespace HospitalAPI.Services
{
   
    public interface IPdfService
    {
        
        Task<string> ExtractTextFromPdfAsync(byte[] pdfBytes);

        bool IsValidPdf(byte[] fileBytes);
    }

  
    public class PdfService : IPdfService
    {
        private readonly ILogger<PdfService> _logger;

        public PdfService(ILogger<PdfService> logger)
        {
            _logger = logger;
        }

        public async Task<string> ExtractTextFromPdfAsync(byte[] pdfBytes)
        {
            try
            {
                if (pdfBytes == null || pdfBytes.Length == 0)
                {
                    throw new ArgumentException("PDF bytes cannot be null or empty");
                }

                if (!IsValidPdf(pdfBytes))
                {
                    throw new InvalidOperationException("Invalid PDF format");
                }

                return await Task.Run(() =>
                {
                    using var memoryStream = new MemoryStream(pdfBytes);
                    using var pdfReader = new PdfReader(memoryStream);
                    using var pdfDocument = new PdfDocument(pdfReader);

                    var textBuilder = new StringBuilder();

                    for (int i = 1; i <= pdfDocument.GetNumberOfPages(); i++)
                    {
                        var page = pdfDocument.GetPage(i);
                        var strategy = new LocationTextExtractionStrategy();
                        var currentText = PdfTextExtractor.GetTextFromPage(page, strategy);

                        textBuilder.AppendLine(currentText);
                    }

                    return textBuilder.ToString().Trim();
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error extracting text from PDF");
                throw new PdfProcessingException("Failed to extract text from PDF", ex);
            }
        }

        public bool IsValidPdf(byte[] fileBytes)
        {
            if (fileBytes == null || fileBytes.Length < 4)
                return false;

            return fileBytes[0] == 0x25 && // %
                   fileBytes[1] == 0x50 && // P
                   fileBytes[2] == 0x44 && // D
                   fileBytes[3] == 0x46;   // F
        }
    }


    public class PdfProcessingException : Exception
    {
        public PdfProcessingException(string message) : base(message)
        {
        }

        public PdfProcessingException(string message, Exception innerException)
            : base(message, innerException)
        {
        }
    }
}
